// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package network

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// TracesReportServiceClient is the client API for TracesReportService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TracesReportServiceClient interface {
	SendTrace(ctx context.Context, opts ...grpc.CallOption) (TracesReportService_SendTraceClient, error)
	SendSpan(ctx context.Context, in *Span, opts ...grpc.CallOption) (*Response, error)
}

type tracesReportServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTracesReportServiceClient(cc grpc.ClientConnInterface) TracesReportServiceClient {
	return &tracesReportServiceClient{cc}
}

func (c *tracesReportServiceClient) SendTrace(ctx context.Context, opts ...grpc.CallOption) (TracesReportService_SendTraceClient, error) {
	stream, err := c.cc.NewStream(ctx, &_TracesReportService_serviceDesc.Streams[0], "/opentracing.v1.TracesReportService/SendTrace", opts...)
	if err != nil {
		return nil, err
	}
	x := &tracesReportServiceSendTraceClient{stream}
	return x, nil
}

type TracesReportService_SendTraceClient interface {
	Send(*Trace) error
	CloseAndRecv() (*Response, error)
	grpc.ClientStream
}

type tracesReportServiceSendTraceClient struct {
	grpc.ClientStream
}

func (x *tracesReportServiceSendTraceClient) Send(m *Trace) error {
	return x.ClientStream.SendMsg(m)
}

func (x *tracesReportServiceSendTraceClient) CloseAndRecv() (*Response, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(Response)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *tracesReportServiceClient) SendSpan(ctx context.Context, in *Span, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/opentracing.v1.TracesReportService/SendSpan", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TracesReportServiceServer is the server API for TracesReportService service.
// All implementations must embed UnimplementedTracesReportServiceServer
// for forward compatibility
type TracesReportServiceServer interface {
	SendTrace(TracesReportService_SendTraceServer) error
	SendSpan(context.Context, *Span) (*Response, error)
	mustEmbedUnimplementedTracesReportServiceServer()
}

// UnimplementedTracesReportServiceServer must be embedded to have forward compatible implementations.
type UnimplementedTracesReportServiceServer struct {
}

func (UnimplementedTracesReportServiceServer) SendTrace(TracesReportService_SendTraceServer) error {
	return status.Errorf(codes.Unimplemented, "method SendTrace not implemented")
}
func (UnimplementedTracesReportServiceServer) SendSpan(context.Context, *Span) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendSpan not implemented")
}
func (UnimplementedTracesReportServiceServer) mustEmbedUnimplementedTracesReportServiceServer() {}

// UnsafeTracesReportServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TracesReportServiceServer will
// result in compilation errors.
type UnsafeTracesReportServiceServer interface {
	mustEmbedUnimplementedTracesReportServiceServer()
}

func RegisterTracesReportServiceServer(s grpc.ServiceRegistrar, srv TracesReportServiceServer) {
	s.RegisterService(&_TracesReportService_serviceDesc, srv)
}

func _TracesReportService_SendTrace_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(TracesReportServiceServer).SendTrace(&tracesReportServiceSendTraceServer{stream})
}

type TracesReportService_SendTraceServer interface {
	SendAndClose(*Response) error
	Recv() (*Trace, error)
	grpc.ServerStream
}

type tracesReportServiceSendTraceServer struct {
	grpc.ServerStream
}

func (x *tracesReportServiceSendTraceServer) SendAndClose(m *Response) error {
	return x.ServerStream.SendMsg(m)
}

func (x *tracesReportServiceSendTraceServer) Recv() (*Trace, error) {
	m := new(Trace)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _TracesReportService_SendSpan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Span)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TracesReportServiceServer).SendSpan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/opentracing.v1.TracesReportService/SendSpan",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TracesReportServiceServer).SendSpan(ctx, req.(*Span))
	}
	return interceptor(ctx, in, info, handler)
}

var _TracesReportService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "opentracing.v1.TracesReportService",
	HandlerType: (*TracesReportServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendSpan",
			Handler:    _TracesReportService_SendSpan_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SendTrace",
			Handler:       _TracesReportService_SendTrace_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "proto/span.proto",
}
